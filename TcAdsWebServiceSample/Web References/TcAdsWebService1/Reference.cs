//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TcAdsWebServiceSample.TcAdsWebService1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'binding' from namespace 'http://schemas.microsoft.com/soap-toolkit/wsdl-extension' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TcAdsSyncSoapBinding", Namespace="http://beckhoff.org/wsdl/")]
    public partial class TcAdsWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadWriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteControlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TcAdsWebService() {
            this.Url = global::TcAdsWebServiceSample.Properties.Settings.Default.TcAdsWebServiceSample_TcAdsWebService1_TcAdsWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WriteCompletedEventHandler WriteCompleted;
        
        /// <remarks/>
        public event ReadCompletedEventHandler ReadCompleted;
        
        /// <remarks/>
        public event ReadWriteCompletedEventHandler ReadWriteCompleted;
        
        /// <remarks/>
        public event ReadStateCompletedEventHandler ReadStateCompleted;
        
        /// <remarks/>
        public event WriteControlCompletedEventHandler WriteControlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://beckhoff.org/action/TcAdsSync.Write", RequestNamespace="http://beckhoff.org/message/", ResponseNamespace="http://beckhoff.org/message/")]
        public void Write(string netId, int nPort, uint indexGroup, uint indexOffset, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] pData) {
            this.Invoke("Write", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        pData});
        }
        
        /// <remarks/>
        public void WriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, byte[] pData) {
            this.WriteAsync(netId, nPort, indexGroup, indexOffset, pData, null);
        }
        
        /// <remarks/>
        public void WriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, byte[] pData, object userState) {
            if ((this.WriteOperationCompleted == null)) {
                this.WriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteOperationCompleted);
            }
            this.InvokeAsync("Write", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        pData}, this.WriteOperationCompleted, userState);
        }
        
        private void OnWriteOperationCompleted(object arg) {
            if ((this.WriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://beckhoff.org/action/TcAdsSync.Read", RequestNamespace="http://beckhoff.org/message/", ResponseNamespace="http://beckhoff.org/message/")]
        public void Read(string netId, int nPort, uint indexGroup, uint indexOffset, int cbLen, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] out byte[] ppData) {
            object[] results = this.Invoke("Read", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        cbLen});
            ppData = ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbLen) {
            this.ReadAsync(netId, nPort, indexGroup, indexOffset, cbLen, null);
        }
        
        /// <remarks/>
        public void ReadAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbLen, object userState) {
            if ((this.ReadOperationCompleted == null)) {
                this.ReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadOperationCompleted);
            }
            this.InvokeAsync("Read", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        cbLen}, this.ReadOperationCompleted, userState);
        }
        
        private void OnReadOperationCompleted(object arg) {
            if ((this.ReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadCompleted(this, new ReadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://beckhoff.org/action/TcAdsSync.ReadWrite", RequestNamespace="http://beckhoff.org/message/", ResponseNamespace="http://beckhoff.org/message/")]
        public void ReadWrite(string netId, int nPort, uint indexGroup, uint indexOffset, int cbRdLen, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] out byte[] ppRdData, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] pwrData) {
            object[] results = this.Invoke("ReadWrite", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        cbRdLen,
                        pwrData});
            ppRdData = ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ReadWriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbRdLen, byte[] pwrData) {
            this.ReadWriteAsync(netId, nPort, indexGroup, indexOffset, cbRdLen, pwrData, null);
        }
        
        /// <remarks/>
        public void ReadWriteAsync(string netId, int nPort, uint indexGroup, uint indexOffset, int cbRdLen, byte[] pwrData, object userState) {
            if ((this.ReadWriteOperationCompleted == null)) {
                this.ReadWriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadWriteOperationCompleted);
            }
            this.InvokeAsync("ReadWrite", new object[] {
                        netId,
                        nPort,
                        indexGroup,
                        indexOffset,
                        cbRdLen,
                        pwrData}, this.ReadWriteOperationCompleted, userState);
        }
        
        private void OnReadWriteOperationCompleted(object arg) {
            if ((this.ReadWriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadWriteCompleted(this, new ReadWriteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://beckhoff.org/action/TcAdsSync.ReadState", RequestNamespace="http://beckhoff.org/message/", ResponseNamespace="http://beckhoff.org/message/")]
        public void ReadState(string netId, int nPort, out int pAdsState, out int pDeviceState) {
            object[] results = this.Invoke("ReadState", new object[] {
                        netId,
                        nPort});
            pAdsState = ((int)(results[0]));
            pDeviceState = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void ReadStateAsync(string netId, int nPort) {
            this.ReadStateAsync(netId, nPort, null);
        }
        
        /// <remarks/>
        public void ReadStateAsync(string netId, int nPort, object userState) {
            if ((this.ReadStateOperationCompleted == null)) {
                this.ReadStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadStateOperationCompleted);
            }
            this.InvokeAsync("ReadState", new object[] {
                        netId,
                        nPort}, this.ReadStateOperationCompleted, userState);
        }
        
        private void OnReadStateOperationCompleted(object arg) {
            if ((this.ReadStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadStateCompleted(this, new ReadStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://beckhoff.org/action/TcAdsSync.WriteControl", RequestNamespace="http://beckhoff.org/message/", ResponseNamespace="http://beckhoff.org/message/")]
        public void WriteControl(string netId, int nPort, int adsState, int deviceState, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] pData) {
            this.Invoke("WriteControl", new object[] {
                        netId,
                        nPort,
                        adsState,
                        deviceState,
                        pData});
        }
        
        /// <remarks/>
        public void WriteControlAsync(string netId, int nPort, int adsState, int deviceState, byte[] pData) {
            this.WriteControlAsync(netId, nPort, adsState, deviceState, pData, null);
        }
        
        /// <remarks/>
        public void WriteControlAsync(string netId, int nPort, int adsState, int deviceState, byte[] pData, object userState) {
            if ((this.WriteControlOperationCompleted == null)) {
                this.WriteControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteControlOperationCompleted);
            }
            this.InvokeAsync("WriteControl", new object[] {
                        netId,
                        nPort,
                        adsState,
                        deviceState,
                        pData}, this.WriteControlOperationCompleted, userState);
        }
        
        private void OnWriteControlOperationCompleted(object arg) {
            if ((this.WriteControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void WriteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReadCompletedEventHandler(object sender, ReadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] ppData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReadWriteCompletedEventHandler(object sender, ReadWriteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadWriteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadWriteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] ppRdData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ReadStateCompletedEventHandler(object sender, ReadStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int pAdsState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pDeviceState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void WriteControlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591